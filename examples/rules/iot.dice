// This rule scans for routers and attemts to classify them as IoT devices.


// Define probes used in this rule
probe ipp 631
probe rtsp 554
probe upnp 1900

probe mqtt 1883 (flags: client-id "dice", retry-tls true, subscribe-topics ["#","$SYS/#"], user-auth true;)
probe amqp 5672 (flags: auth-user "", auth-pass "", use-tls true;)

probe ftp [21,2121] (flags: authtls true, verbose true;)
probe telnet [23,2323] (flags: verbose true;)
probe ssh [22,2222] (flags: userauth true;)

probe http (flags: user-agent "DTUScanner";)

// -- Unsuported -- 
// - embedded fields (e.g., 'flags.paths')
// - variable values (e.g., '$USER_AGENT')
// probe coap 5683 (flags.paths: ".well-known/core", "/"; flags: user-agent $USER_AGENT;)

// Nodes from modules
// func is the function to run within the module
rule module "upnp.lua" (sid: upnp-sig;)
rule module "router.lua" (sid: tr064-sig; func: "tr065";)
rule module "router.lua" (sid: tr069-sig; func: "tr069";)

// Nodes with different modes to control their behavior
// after labelling a record.
// roles: 
// - hold: label on match and propagate
// - unsub: label and unsub on match, and propagate
// - none: unsub and propagate
rule module "j4t.lua" (sid: j4t-sig; role: hold;) 

// Define scans
scan udp "probes/coap_5683.pkt" (probes: coap;)
scan udp "probes/upnp_1900.pkt" (probes: upnp;)
scan tcp synack (probes: mqtt,amqp,ipp,rtsp,ftp,telnet,ssh;)

// This scan uses a mapping template to convert the record into flags for probes
// map:
// * template: use a template to convert records
// * map: use a json file to select triggers
// * direct: use a configuration file to build targets
scan tcp synack (rules: upnp-sig; probes: http; map: template "upnp-location.template";)

// Creates a node containing a collection of signatures
rule source "router" (rules: tr069-sig, tr064-sig; sid: router-sig;)