// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: proto/module.proto

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Module_Propagate_FullMethodName  = "/proto.Module/Propagate"
	Module_Properties_FullMethodName = "/proto.Module/Properties"
	Module_Handle_FullMethodName     = "/proto.Module/Handle"
)

// ModuleClient is the client API for Module service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModuleClient interface {
	Propagate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Properties(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Fields, error)
	Handle(ctx context.Context, in *HandleRequest, opts ...grpc.CallOption) (*Empty, error)
}

type moduleClient struct {
	cc grpc.ClientConnInterface
}

func NewModuleClient(cc grpc.ClientConnInterface) ModuleClient {
	return &moduleClient{cc}
}

func (c *moduleClient) Propagate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Module_Propagate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleClient) Properties(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Fields, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Fields)
	err := c.cc.Invoke(ctx, Module_Properties_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleClient) Handle(ctx context.Context, in *HandleRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Module_Handle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModuleServer is the server API for Module service.
// All implementations must embed UnimplementedModuleServer
// for forward compatibility.
type ModuleServer interface {
	Propagate(context.Context, *Empty) (*Empty, error)
	Properties(context.Context, *Empty) (*Fields, error)
	Handle(context.Context, *HandleRequest) (*Empty, error)
	mustEmbedUnimplementedModuleServer()
}

// UnimplementedModuleServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedModuleServer struct{}

func (UnimplementedModuleServer) Propagate(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Propagate not implemented")
}
func (UnimplementedModuleServer) Properties(context.Context, *Empty) (*Fields, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Properties not implemented")
}
func (UnimplementedModuleServer) Handle(context.Context, *HandleRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Handle not implemented")
}
func (UnimplementedModuleServer) mustEmbedUnimplementedModuleServer() {}
func (UnimplementedModuleServer) testEmbeddedByValue()                {}

// UnsafeModuleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModuleServer will
// result in compilation errors.
type UnsafeModuleServer interface {
	mustEmbedUnimplementedModuleServer()
}

func RegisterModuleServer(s grpc.ServiceRegistrar, srv ModuleServer) {
	// If the following call pancis, it indicates UnimplementedModuleServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Module_ServiceDesc, srv)
}

func _Module_Propagate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServer).Propagate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Module_Propagate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServer).Propagate(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Module_Properties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServer).Properties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Module_Properties_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServer).Properties(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Module_Handle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServer).Handle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Module_Handle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServer).Handle(ctx, req.(*HandleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Module_ServiceDesc is the grpc.ServiceDesc for Module service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Module_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Module",
	HandlerType: (*ModuleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Propagate",
			Handler:    _Module_Propagate_Handler,
		},
		{
			MethodName: "Properties",
			Handler:    _Module_Properties_Handler,
		},
		{
			MethodName: "Handle",
			Handler:    _Module_Handle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/module.proto",
}

const (
	Adapter_GetHost_FullMethodName        = "/proto.Adapter/GetHost"
	Adapter_GetSource_FullMethodName      = "/proto.Adapter/GetSource"
	Adapter_GetScan_FullMethodName        = "/proto.Adapter/GetScan"
	Adapter_AddLabel_FullMethodName       = "/proto.Adapter/AddLabel"
	Adapter_AddFingerprint_FullMethodName = "/proto.Adapter/AddFingerprint"
	Adapter_AddScan_FullMethodName        = "/proto.Adapter/AddScan"
	Adapter_AddSource_FullMethodName      = "/proto.Adapter/AddSource"
	Adapter_LabelHost_FullMethodName      = "/proto.Adapter/LabelHost"
	Adapter_Query_FullMethodName          = "/proto.Adapter/Query"
)

// AdapterClient is the client API for Adapter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdapterClient interface {
	GetHost(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Host, error)
	GetSource(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Source, error)
	GetScan(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Scan, error)
	AddLabel(ctx context.Context, in *Label, opts ...grpc.CallOption) (*Empty, error)
	AddFingerprint(ctx context.Context, in *Fingerprint, opts ...grpc.CallOption) (*Empty, error)
	AddScan(ctx context.Context, in *Scan, opts ...grpc.CallOption) (*Empty, error)
	AddSource(ctx context.Context, in *Source, opts ...grpc.CallOption) (*Empty, error)
	LabelHost(ctx context.Context, in *LabelHostRequest, opts ...grpc.CallOption) (*Empty, error)
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
}

type adapterClient struct {
	cc grpc.ClientConnInterface
}

func NewAdapterClient(cc grpc.ClientConnInterface) AdapterClient {
	return &adapterClient{cc}
}

func (c *adapterClient) GetHost(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Host, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Host)
	err := c.cc.Invoke(ctx, Adapter_GetHost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterClient) GetSource(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Source, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Source)
	err := c.cc.Invoke(ctx, Adapter_GetSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterClient) GetScan(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Scan, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Scan)
	err := c.cc.Invoke(ctx, Adapter_GetScan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterClient) AddLabel(ctx context.Context, in *Label, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Adapter_AddLabel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterClient) AddFingerprint(ctx context.Context, in *Fingerprint, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Adapter_AddFingerprint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterClient) AddScan(ctx context.Context, in *Scan, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Adapter_AddScan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterClient) AddSource(ctx context.Context, in *Source, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Adapter_AddSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterClient) LabelHost(ctx context.Context, in *LabelHostRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Adapter_LabelHost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, Adapter_Query_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdapterServer is the server API for Adapter service.
// All implementations must embed UnimplementedAdapterServer
// for forward compatibility.
type AdapterServer interface {
	GetHost(context.Context, *IDRequest) (*Host, error)
	GetSource(context.Context, *IDRequest) (*Source, error)
	GetScan(context.Context, *IDRequest) (*Scan, error)
	AddLabel(context.Context, *Label) (*Empty, error)
	AddFingerprint(context.Context, *Fingerprint) (*Empty, error)
	AddScan(context.Context, *Scan) (*Empty, error)
	AddSource(context.Context, *Source) (*Empty, error)
	LabelHost(context.Context, *LabelHostRequest) (*Empty, error)
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	mustEmbedUnimplementedAdapterServer()
}

// UnimplementedAdapterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdapterServer struct{}

func (UnimplementedAdapterServer) GetHost(context.Context, *IDRequest) (*Host, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHost not implemented")
}
func (UnimplementedAdapterServer) GetSource(context.Context, *IDRequest) (*Source, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSource not implemented")
}
func (UnimplementedAdapterServer) GetScan(context.Context, *IDRequest) (*Scan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScan not implemented")
}
func (UnimplementedAdapterServer) AddLabel(context.Context, *Label) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLabel not implemented")
}
func (UnimplementedAdapterServer) AddFingerprint(context.Context, *Fingerprint) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFingerprint not implemented")
}
func (UnimplementedAdapterServer) AddScan(context.Context, *Scan) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddScan not implemented")
}
func (UnimplementedAdapterServer) AddSource(context.Context, *Source) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSource not implemented")
}
func (UnimplementedAdapterServer) LabelHost(context.Context, *LabelHostRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LabelHost not implemented")
}
func (UnimplementedAdapterServer) Query(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedAdapterServer) mustEmbedUnimplementedAdapterServer() {}
func (UnimplementedAdapterServer) testEmbeddedByValue()                 {}

// UnsafeAdapterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdapterServer will
// result in compilation errors.
type UnsafeAdapterServer interface {
	mustEmbedUnimplementedAdapterServer()
}

func RegisterAdapterServer(s grpc.ServiceRegistrar, srv AdapterServer) {
	// If the following call pancis, it indicates UnimplementedAdapterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Adapter_ServiceDesc, srv)
}

func _Adapter_GetHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServer).GetHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Adapter_GetHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServer).GetHost(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adapter_GetSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServer).GetSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Adapter_GetSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServer).GetSource(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adapter_GetScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServer).GetScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Adapter_GetScan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServer).GetScan(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adapter_AddLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Label)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServer).AddLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Adapter_AddLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServer).AddLabel(ctx, req.(*Label))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adapter_AddFingerprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fingerprint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServer).AddFingerprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Adapter_AddFingerprint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServer).AddFingerprint(ctx, req.(*Fingerprint))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adapter_AddScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Scan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServer).AddScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Adapter_AddScan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServer).AddScan(ctx, req.(*Scan))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adapter_AddSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Source)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServer).AddSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Adapter_AddSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServer).AddSource(ctx, req.(*Source))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adapter_LabelHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabelHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServer).LabelHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Adapter_LabelHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServer).LabelHost(ctx, req.(*LabelHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adapter_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Adapter_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Adapter_ServiceDesc is the grpc.ServiceDesc for Adapter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Adapter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Adapter",
	HandlerType: (*AdapterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHost",
			Handler:    _Adapter_GetHost_Handler,
		},
		{
			MethodName: "GetSource",
			Handler:    _Adapter_GetSource_Handler,
		},
		{
			MethodName: "GetScan",
			Handler:    _Adapter_GetScan_Handler,
		},
		{
			MethodName: "AddLabel",
			Handler:    _Adapter_AddLabel_Handler,
		},
		{
			MethodName: "AddFingerprint",
			Handler:    _Adapter_AddFingerprint_Handler,
		},
		{
			MethodName: "AddScan",
			Handler:    _Adapter_AddScan_Handler,
		},
		{
			MethodName: "AddSource",
			Handler:    _Adapter_AddSource_Handler,
		},
		{
			MethodName: "LabelHost",
			Handler:    _Adapter_LabelHost_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _Adapter_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/module.proto",
}
